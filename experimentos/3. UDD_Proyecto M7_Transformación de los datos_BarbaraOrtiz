{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN33Gma1fQi0j2Oc+U1eiRE"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Ahora que la división y limpieza de los datos está realizado, empezaremos con la transformación."],"metadata":{"id":"stfPLH6UiQhc"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kUsqA9xjmE8u","executionInfo":{"status":"ok","timestamp":1718674136563,"user_tz":240,"elapsed":2416,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"807d52e0-a10a-4652-c1ac-865d64b3a03c"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["# Importamos librerias\n","import pickle\n","import seaborn as sns\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from tabulate import tabulate\n","import pandas as pd\n","import seaborn as sns\n","import statsmodels.api as sm\n","from statsmodels.stats.outliers_influence import variance_inflation_factor\n"],"metadata":{"id":"EdaeaYV-mSE6","executionInfo":{"status":"ok","timestamp":1718674136564,"user_tz":240,"elapsed":4,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"execution_count":56,"outputs":[]},{"cell_type":"markdown","source":["# **Transformación de los datos con alto grado de confiabilidad**"],"metadata":{"id":"X0bwlcGqieFp"}},{"cell_type":"code","execution_count":57,"metadata":{"id":"Qj0VYiTwgmbU","executionInfo":{"status":"ok","timestamp":1718674136564,"user_tz":240,"elapsed":3,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"outputs":[],"source":["# Ruta del archivo en Google Drive\n","ruta_archivo_drive = '/content/drive/My Drive/Proyecto 7/data/df_alta_confianza.pkl'\n","\n","# Cargar el DataFrame desde el archivo\n","with open(ruta_archivo_drive, 'rb') as f:\n","    df_alta_confianza = pickle.load(f)"]},{"cell_type":"code","source":["# Agrupar las columnas por Categórica y Numérica\n","Columna_categorica = df_alta_confianza.select_dtypes(include =[\"object\"]).columns\n","Columna_numerica = df_alta_confianza.select_dtypes(include =[\"float64\", \"int64\"]).columns\n","print(\"El total de columnas categoricas son \", len(Columna_categorica))\n","print(\"El total de columnas numéricas son \", len(Columna_numerica))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CYpZwYaDnE8R","executionInfo":{"status":"ok","timestamp":1718674136564,"user_tz":240,"elapsed":3,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"0f7731eb-2023-48bc-e019-0b3e4069fc71"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["El total de columnas categoricas son  12\n","El total de columnas numéricas son  2\n"]}]},{"cell_type":"code","source":["# Generar gráficas individuales de los valores numéricos\n","fig, ax = plt.subplots(nrows=len(Columna_numerica), ncols=1, figsize=(8, 4 * len(Columna_numerica)))\n","fig.subplots_adjust(hspace=0.5)\n","\n","for i, col in enumerate(Columna_numerica):\n","    sns.boxplot(y=col, data=df_alta_confianza, ax=ax[i], color='skyblue')  # Cambiar x por y\n","\n","    # Añadir la mediana como una línea horizontal\n","    median = df_alta_confianza[col].median()\n","    ax[i].axhline(y=median, color='r', linestyle='--', linewidth=2)\n","\n","    # Añadir títulos y etiquetas\n","    ax[i].set_title(f'Distribución de {col}', fontsize=12)  # Reducir el tamaño del título\n","    ax[i].set_xlabel('')\n","    ax[i].set_ylabel('')\n","    ax[i].tick_params(axis='x', labelsize=10)  # Reducir el tamaño de las etiquetas del eje x\n","    ax[i].tick_params(axis='y', labelsize=10)  # Reducir el tamaño de las etiquetas del eje y\n","    ax[i].grid(True, linestyle='--', alpha=0.7)\n","\n","# Ajustar el espacio entre las gráficas\n","plt.tight_layout()\n","\n","# Mostrar el gráfico\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":807},"id":"dJRwi2ENn8h5","executionInfo":{"status":"ok","timestamp":1718674137447,"user_tz":240,"elapsed":885,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"e25f0a37-04fc-4370-90f3-9a3e474e6aee"},"execution_count":59,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x800 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Observación:**\n","La columna \"_trusted_judgments\" presenta datos atícos. Estos datos serán tratados mediante el método de IQR."],"metadata":{"id":"8G9sI09wCYgj"}},{"cell_type":"code","source":["# Calculamos los cuartiles, el rango intercuartílico y los límites inferior y superior para el método de IQR\n","def identificar_outliers(col):\n","    Q1 = col.quantile(0.25)\n","    Q3 = col.quantile(0.75)\n","    IQR = Q3 - Q1\n","\n","    Limite_Sup = Q3 + (1.5 * IQR)\n","    Limite_Inf = Q1 - (1.5 * IQR)\n","\n","\n","    print(f\"Mediana = {col.median()}\")\n","    print(f\"Q1 = {Q1}\")\n","    print(f\"Q3 = {Q3}\")\n","    print(f\"IQR = {IQR}\")\n","    print(f\"Limite Inferior = {Limite_Inf}\")\n","    print(f\"Limite Superior = {Limite_Sup}\")\n","\n","\n","\n","print(\"_trusted_judgments\")\n","identificar_outliers(df_alta_confianza[\"_trusted_judgments\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"g9SuZ3N9ySzL","executionInfo":{"status":"ok","timestamp":1718674137815,"user_tz":240,"elapsed":370,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"05787b59-a077-4b2d-c93c-55bd3696015c"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stdout","text":["_trusted_judgments\n","Mediana = 86.0\n","Q1 = 82.0\n","Q3 = 91.0\n","IQR = 9.0\n","Limite Inferior = 68.5\n","Limite Superior = 104.5\n"]}]},{"cell_type":"code","source":["# Función para identificar outliers\n","def data_atipica(col, Limite_Inferior=None, Limite_Superior=None):\n","\n","    # Definir límites\n","    if Limite_Inferior is None:\n","        Limite_Inferior = col.quantile(0.25) - 1.5 * (col.quantile(0.75) - col.quantile(0.25))\n","\n","    if Limite_Superior is None:\n","        Limite_Superior = col.quantile(0.75) + 1.5 * (col.quantile(0.75) - col.quantile(0.25))\n","\n","    outliers = col[(col < Limite_Inferior) | (col > Limite_Superior)].sort_values()\n","    return outliers\n","\n","# Identificar outliers en la columna '_trusted_judgments'\n","outliers = data_atipica(df_alta_confianza[\"_trusted_judgments\"], 68.5, 104.5)\n","outliers_index = outliers.index"],"metadata":{"id":"ol6To8ofyZ4J","executionInfo":{"status":"ok","timestamp":1718674137816,"user_tz":240,"elapsed":18,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"execution_count":61,"outputs":[]},{"cell_type":"code","source":["# Función para reemplazar outliers con la mediana\n","def delete_outlier(df, col_name, index, Mediana):\n","    df.loc[index, col_name] = Mediana\n","    print(df[col_name])\n","\n","# Calcular la mediana\n","mediana = df_alta_confianza[\"_trusted_judgments\"].median()\n","\n","# Reemplazar los outliers con la mediana\n","delete_outlier(df_alta_confianza, '_trusted_judgments', outliers_index, mediana)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZTIUipOLyea5","executionInfo":{"status":"ok","timestamp":1718674137816,"user_tz":240,"elapsed":18,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"d2a696e7-a6ff-457c-d76d-15054ccae042"},"execution_count":62,"outputs":[{"output_type":"stream","name":"stdout","text":["21     82\n","33     87\n","52     75\n","82     81\n","111    95\n","152    84\n","179    90\n","205    84\n","213    91\n","235    86\n","263    76\n","280    75\n","289    86\n","293    89\n","300    91\n","322    91\n","328    85\n","343    91\n","347    76\n","377    87\n","401    87\n","402    91\n","407    92\n","411    86\n","430    86\n","Name: _trusted_judgments, dtype: int64\n"]}]},{"cell_type":"markdown","source":["**Por qué se reemplazó outlier con el valor de la mediana?**\n","\n","Al reemplazar outliers con la mediana, nos aseguramos que el valor sustituido sea representativo de la mayoría de los datos.\n","Reemplazar por la mediana es comunmente usado para aquellos datos de tipo continuo.\n","Las variables continuas son aquellas que pueden tomar un número infinito de valores dentro de un rango y suelen ser de tipo numérico."],"metadata":{"id":"S3RiKU_G_foz"}},{"cell_type":"code","source":["# Se identifica las columnas que son categóricas\n","df_categorica = df_alta_confianza.select_dtypes(include=['object']).columns\n","df_new_categorica = df_alta_confianza[df_categorica]\n","df_new_categorica.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QnZDCJtVo7YS","executionInfo":{"status":"ok","timestamp":1718674137816,"user_tz":240,"elapsed":16,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"9ffad229-bee2-4b0d-85fc-bd0fb45b079e"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 25 entries, 21 to 430\n","Data columns (total 12 columns):\n"," #   Column              Non-Null Count  Dtype \n","---  ------              --------------  ----- \n"," 0   birthplace          25 non-null     object\n"," 1   date_of_birth       25 non-null     object\n"," 2   race_ethnicity      25 non-null     object\n"," 3   religion            25 non-null     object\n"," 4   sexual_orientation  25 non-null     object\n"," 5   award               25 non-null     object\n"," 6   biourl              25 non-null     object\n"," 7   movie               25 non-null     object\n"," 8   person              25 non-null     object\n"," 9   genre               25 non-null     object\n"," 10  gender              25 non-null     object\n"," 11  region              25 non-null     object\n","dtypes: object(12)\n","memory usage: 3.1+ KB\n"]}]},{"cell_type":"markdown","source":["**Observación:**\n","Se decide eliminar las columnas \"biourl\", \"movie\", \"birthplace\" y \"person\" ya que no son relevantes para el análisis que estamos realizando.\n","Estas características no se utilizarán como variables predictoras en el modelo y no son de interés para el análisis."],"metadata":{"id":"b82nVio0pBPl"}},{"cell_type":"code","source":["df_new_categorica = df_new_categorica.drop(columns=['biourl', 'movie', \"birthplace\", 'person'])"],"metadata":{"id":"2ZXC5erTpFQ9","executionInfo":{"status":"ok","timestamp":1718674137816,"user_tz":240,"elapsed":14,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"execution_count":64,"outputs":[]},{"cell_type":"code","source":["# Se decide eliminar la columna \"date_of_birth\", ya que contiene información que parece tener errores.\n","df_new_categorica = df_new_categorica.drop(columns=[\"date_of_birth\"])"],"metadata":{"id":"ArE0wQvj9cSl","executionInfo":{"status":"ok","timestamp":1718674137816,"user_tz":240,"elapsed":14,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"execution_count":65,"outputs":[]},{"cell_type":"markdown","source":["**Transformación de los datos**\n","\n","Se convertirán las columnas categóricas en variables numéricas usando la técnica de Embedding. El embedding sirve para representar datos categóricos en un espacio de características continuas de menor dimensión."],"metadata":{"id":"KWSWx-typVUc"}},{"cell_type":"code","source":["# Se hace una copia de df_alta_confianza y se eliminan las columnas de variables \"object\"\n","df_alta_confianza_copy = df_alta_confianza.copy()\n","df_alta_confianza_copy = df_alta_confianza_copy.select_dtypes(exclude=['object'])"],"metadata":{"id":"P7i6b_ZZhWDc","executionInfo":{"status":"ok","timestamp":1718674137816,"user_tz":240,"elapsed":14,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"execution_count":66,"outputs":[]},{"cell_type":"code","source":["# Obtener una copia del DataFrame\n","df_encoded_ac = df_new_categorica.copy()\n","\n","# Definir el tamaño del embedding\n","embedding_dim = 10\n","\n","# Crear embeddings para cada columna categórica\n","category_embedding = {}\n","\n","for column in df_encoded_ac.columns:\n","    if df_encoded_ac[column].dtype == 'object':  # Si la columna es categórica\n","        unique_categories = df_encoded_ac[column].unique()\n","        category_embedding[column] = dict(zip(unique_categories, range(1, len(unique_categories) + 1)))  # Asignar un número único a cada categoría\n","        df_encoded_ac[column] = df_encoded_ac[column].map(category_embedding[column]).fillna(0)  # Llenar los valores NaN con 0\n","\n","# Mostrar el DataFrame transformado\n","print(df_encoded_ac)\n","\n","# Imprimir el diccionario de mapeo\n","print(category_embedding)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PeicDJpIMyNq","executionInfo":{"status":"ok","timestamp":1718674137816,"user_tz":240,"elapsed":14,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"fa3b9dc8-0984-41db-c693-0fe8fa8dfc88"},"execution_count":67,"outputs":[{"output_type":"stream","name":"stdout","text":["     race_ethnicity  religion  sexual_orientation  award  genre  gender  \\\n","21                1         1                   1      1      1       1   \n","33                1         2                   1      1      2       1   \n","52                1         3                   1      1      3       1   \n","82                1         4                   1      1      4       1   \n","111               1         4                   1      2      4       1   \n","152               1         5                   1      2      4       1   \n","179               1         6                   1      3      5       1   \n","205               1         7                   1      3      4       1   \n","213               1         8                   1      3      4       1   \n","235               1         1                   1      3      4       1   \n","263               1         9                   1      4      4       2   \n","280               1         8                   1      4      4       2   \n","289               1         2                   1      4      4       2   \n","293               1         5                   1      4      4       2   \n","300               1         4                   1      4      4       2   \n","322               1         2                   1      4      6       1   \n","328               1        10                   1      4      4       1   \n","343               1         4                   1      5      4       2   \n","347               1        11                   1      5      4       2   \n","377               1         2                   1      5      2       2   \n","401               1        12                   2      5      4       2   \n","402               1         7                   1      5      7       2   \n","407               1         2                   1      5      4       2   \n","411               2        13                   1      5      4       2   \n","430               1         9                   1      4      4       1   \n","\n","     region  \n","21        1  \n","33        2  \n","52        1  \n","82        2  \n","111       1  \n","152       1  \n","179       1  \n","205       1  \n","213       1  \n","235       1  \n","263       1  \n","280       1  \n","289       2  \n","293       2  \n","300       1  \n","322       1  \n","328       1  \n","343       1  \n","347       1  \n","377       1  \n","401       1  \n","402       1  \n","407       2  \n","411       1  \n","430       1  \n","{'race_ethnicity': {'White': 1, 'Black': 2}, 'religion': {'Anglican/episcopalian': 1, 'Jewish': 2, 'Quaker': 3, 'Roman Catholic': 4, 'Born-Again Christian': 5, 'Disciples of Christ': 6, 'Sufism': 7, 'Congregationalist': 8, 'Christian Science': 9, 'Atheist': 10, 'Hindu': 11, 'Buddhist': 12, 'Agnostic': 13}, 'sexual_orientation': {'Straight': 1, 'Bisexual': 2}, 'award': {'Best Director': 1, 'Best Actor': 2, 'Best Supporting Actor': 3, 'Best Actress': 4, 'Best Supporting Actress': 5}, 'genre': {'Aventura': 1, 'Comedia': 2, 'Bélica': 3, 'Drama': 4, 'Crimen': 5, 'Romance': 6, 'Biografía': 7}, 'gender': {'Hombre': 1, 'Mujer': 2}, 'region': {'North America': 1, 'Europe': 2}}\n"]}]},{"cell_type":"code","source":["genre_mapping = category_embedding[\"genre\"]  # 'category_embedding' es el diccionario que contiene el mapeo\n","print(genre_mapping)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hMsJ54l3QM1i","executionInfo":{"status":"ok","timestamp":1718674137816,"user_tz":240,"elapsed":12,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"a111a302-aa30-49ee-a5c1-0d220e608a29"},"execution_count":68,"outputs":[{"output_type":"stream","name":"stdout","text":["{'Aventura': 1, 'Comedia': 2, 'Bélica': 3, 'Drama': 4, 'Crimen': 5, 'Romance': 6, 'Biografía': 7}\n"]}]},{"cell_type":"code","source":["award_mapping = category_embedding[\"award\"]  # 'category_embedding' es el diccionario que contiene el mapeo\n","print(award_mapping)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"by3uAQ1SSAeI","executionInfo":{"status":"ok","timestamp":1718674137817,"user_tz":240,"elapsed":11,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"cd55fa0a-f0f0-43fd-84f5-d7f48da0ab32"},"execution_count":69,"outputs":[{"output_type":"stream","name":"stdout","text":["{'Best Director': 1, 'Best Actor': 2, 'Best Supporting Actor': 3, 'Best Actress': 4, 'Best Supporting Actress': 5}\n"]}]},{"cell_type":"code","source":["# Concatenar df_encoded_ac con df_alta_confianza_copy\n","df_concatenado_alta_confianza = pd.concat([df_alta_confianza_copy, df_encoded_ac], axis=1)\n","\n","df_concatenado_alta_confianza.info()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1MTOY0SeNNsZ","executionInfo":{"status":"ok","timestamp":1718674137817,"user_tz":240,"elapsed":10,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"c2c4dffe-1a79-45d4-ae5a-36532fc9c7af"},"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 25 entries, 21 to 430\n","Data columns (total 9 columns):\n"," #   Column              Non-Null Count  Dtype\n","---  ------              --------------  -----\n"," 0   _trusted_judgments  25 non-null     int64\n"," 1   year_of_award       25 non-null     int64\n"," 2   race_ethnicity      25 non-null     int64\n"," 3   religion            25 non-null     int64\n"," 4   sexual_orientation  25 non-null     int64\n"," 5   award               25 non-null     int64\n"," 6   genre               25 non-null     int64\n"," 7   gender              25 non-null     int64\n"," 8   region              25 non-null     int64\n","dtypes: int64(9)\n","memory usage: 2.5 KB\n"]}]},{"cell_type":"code","source":["df_concatenado_alta_confianza.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"9-I_LVrvtt7l","executionInfo":{"status":"ok","timestamp":1718674137817,"user_tz":240,"elapsed":9,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"463923b2-f72f-483b-d028-33819b5c0850"},"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       _trusted_judgments  year_of_award  race_ethnicity   religion  \\\n","count           25.000000       25.00000           25.00  25.000000   \n","mean            85.760000     1977.44000            1.04   5.640000   \n","std              5.629387       23.90272            0.20   3.580968   \n","min             75.000000     1941.00000            1.00   1.000000   \n","25%             84.000000     1958.00000            1.00   2.000000   \n","50%             86.000000     1977.00000            1.00   5.000000   \n","75%             91.000000     2000.00000            1.00   8.000000   \n","max             95.000000     2010.00000            2.00  13.000000   \n","\n","       sexual_orientation      award     genre     gender     region  \n","count               25.00  25.000000  25.00000  25.000000  25.000000  \n","mean                 1.04   3.480000   3.92000   1.480000   1.200000  \n","std                  0.20   1.417745   1.15181   0.509902   0.408248  \n","min                  1.00   1.000000   1.00000   1.000000   1.000000  \n","25%                  1.00   3.000000   4.00000   1.000000   1.000000  \n","50%                  1.00   4.000000   4.00000   1.000000   1.000000  \n","75%                  1.00   5.000000   4.00000   2.000000   1.000000  \n","max                  2.00   5.000000   7.00000   2.000000   2.000000  "],"text/html":["\n","  <div id=\"df-d02c040a-4dc6-4b2a-9366-ae9415fe5a68\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>_trusted_judgments</th>\n","      <th>year_of_award</th>\n","      <th>race_ethnicity</th>\n","      <th>religion</th>\n","      <th>sexual_orientation</th>\n","      <th>award</th>\n","      <th>genre</th>\n","      <th>gender</th>\n","      <th>region</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>25.000000</td>\n","      <td>25.00000</td>\n","      <td>25.00</td>\n","      <td>25.000000</td>\n","      <td>25.00</td>\n","      <td>25.000000</td>\n","      <td>25.00000</td>\n","      <td>25.000000</td>\n","      <td>25.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>85.760000</td>\n","      <td>1977.44000</td>\n","      <td>1.04</td>\n","      <td>5.640000</td>\n","      <td>1.04</td>\n","      <td>3.480000</td>\n","      <td>3.92000</td>\n","      <td>1.480000</td>\n","      <td>1.200000</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>5.629387</td>\n","      <td>23.90272</td>\n","      <td>0.20</td>\n","      <td>3.580968</td>\n","      <td>0.20</td>\n","      <td>1.417745</td>\n","      <td>1.15181</td>\n","      <td>0.509902</td>\n","      <td>0.408248</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>75.000000</td>\n","      <td>1941.00000</td>\n","      <td>1.00</td>\n","      <td>1.000000</td>\n","      <td>1.00</td>\n","      <td>1.000000</td>\n","      <td>1.00000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>84.000000</td>\n","      <td>1958.00000</td>\n","      <td>1.00</td>\n","      <td>2.000000</td>\n","      <td>1.00</td>\n","      <td>3.000000</td>\n","      <td>4.00000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>86.000000</td>\n","      <td>1977.00000</td>\n","      <td>1.00</td>\n","      <td>5.000000</td>\n","      <td>1.00</td>\n","      <td>4.000000</td>\n","      <td>4.00000</td>\n","      <td>1.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>91.000000</td>\n","      <td>2000.00000</td>\n","      <td>1.00</td>\n","      <td>8.000000</td>\n","      <td>1.00</td>\n","      <td>5.000000</td>\n","      <td>4.00000</td>\n","      <td>2.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>95.000000</td>\n","      <td>2010.00000</td>\n","      <td>2.00</td>\n","      <td>13.000000</td>\n","      <td>2.00</td>\n","      <td>5.000000</td>\n","      <td>7.00000</td>\n","      <td>2.000000</td>\n","      <td>2.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d02c040a-4dc6-4b2a-9366-ae9415fe5a68')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d02c040a-4dc6-4b2a-9366-ae9415fe5a68 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d02c040a-4dc6-4b2a-9366-ae9415fe5a68');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-22a91361-7aa4-4943-b506-1353edfbb8da\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-22a91361-7aa4-4943-b506-1353edfbb8da')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-22a91361-7aa4-4943-b506-1353edfbb8da button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df_concatenado_alta_confianza\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"_trusted_judgments\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 33.67931741463392,\n        \"min\": 5.629387178015028,\n        \"max\": 95.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          85.76,\n          86.0,\n          25.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year_of_award\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 904.2242658145869,\n        \"min\": 23.902719510549424,\n        \"max\": 2010.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1977.44,\n          1977.0,\n          25.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"race_ethnicity\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.486917663590912,\n        \"min\": 0.2,\n        \"max\": 25.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.04,\n          2.0,\n          0.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"religion\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.865127195683436,\n        \"min\": 1.0,\n        \"max\": 25.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.64,\n          5.0,\n          25.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sexual_orientation\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.486917663590912,\n        \"min\": 0.2,\n        \"max\": 25.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.04,\n          2.0,\n          0.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"award\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.8225512528739936,\n        \"min\": 1.0,\n        \"max\": 25.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          25.0,\n          3.48,\n          4.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genre\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.80379756418814,\n        \"min\": 1.0,\n        \"max\": 25.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          25.0,\n          3.92,\n          7.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.400988212850088,\n        \"min\": 0.5099019513592785,\n        \"max\": 25.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.48,\n          2.0,\n          0.5099019513592785\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.465851021225546,\n        \"min\": 0.408248290463863,\n        \"max\": 25.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.2,\n          2.0,\n          0.408248290463863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":71}]},{"cell_type":"code","source":["# Analizamos mapa de correlación\n","corr = df_concatenado_alta_confianza.corr()\n","corr.style.background_gradient()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":331},"id":"r6QMiPUlNfx-","executionInfo":{"status":"ok","timestamp":1718674137817,"user_tz":240,"elapsed":8,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"3431e0d4-6488-4b75-a653-392eb4941447"},"execution_count":72,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<pandas.io.formats.style.Styler at 0x7c8fd598a710>"],"text/html":["<style type=\"text/css\">\n","#T_1574b_row0_col0, #T_1574b_row1_col1, #T_1574b_row2_col2, #T_1574b_row3_col3, #T_1574b_row4_col4, #T_1574b_row5_col5, #T_1574b_row6_col6, #T_1574b_row7_col7, #T_1574b_row8_col8 {\n","  background-color: #023858;\n","  color: #f1f1f1;\n","}\n","#T_1574b_row0_col1 {\n","  background-color: #c6cce3;\n","  color: #000000;\n","}\n","#T_1574b_row0_col2 {\n","  background-color: #f0eaf4;\n","  color: #000000;\n","}\n","#T_1574b_row0_col3 {\n","  background-color: #f1ebf4;\n","  color: #000000;\n","}\n","#T_1574b_row0_col4 {\n","  background-color: #eae6f1;\n","  color: #000000;\n","}\n","#T_1574b_row0_col5 {\n","  background-color: #b5c4df;\n","  color: #000000;\n","}\n","#T_1574b_row0_col6 {\n","  background-color: #9fbad9;\n","  color: #000000;\n","}\n","#T_1574b_row0_col7 {\n","  background-color: #f3edf5;\n","  color: #000000;\n","}\n","#T_1574b_row0_col8, #T_1574b_row1_col8 {\n","  background-color: #adc1dd;\n","  color: #000000;\n","}\n","#T_1574b_row1_col0, #T_1574b_row1_col2 {\n","  background-color: #afc1dd;\n","  color: #000000;\n","}\n","#T_1574b_row1_col3, #T_1574b_row5_col0 {\n","  background-color: #a9bfdc;\n","  color: #000000;\n","}\n","#T_1574b_row1_col4 {\n","  background-color: #c9cee4;\n","  color: #000000;\n","}\n","#T_1574b_row1_col5 {\n","  background-color: #cccfe5;\n","  color: #000000;\n","}\n","#T_1574b_row1_col6 {\n","  background-color: #a1bbda;\n","  color: #000000;\n","}\n","#T_1574b_row1_col7, #T_1574b_row3_col0, #T_1574b_row3_col8, #T_1574b_row7_col1, #T_1574b_row8_col2, #T_1574b_row8_col3, #T_1574b_row8_col4, #T_1574b_row8_col5, #T_1574b_row8_col6 {\n","  background-color: #fff7fb;\n","  color: #000000;\n","}\n","#T_1574b_row2_col0 {\n","  background-color: #dbdaeb;\n","  color: #000000;\n","}\n","#T_1574b_row2_col1, #T_1574b_row7_col8 {\n","  background-color: #abbfdc;\n","  color: #000000;\n","}\n","#T_1574b_row2_col3 {\n","  background-color: #4a98c5;\n","  color: #f1f1f1;\n","}\n","#T_1574b_row2_col4, #T_1574b_row4_col2 {\n","  background-color: #f7f0f7;\n","  color: #000000;\n","}\n","#T_1574b_row2_col5, #T_1574b_row3_col7, #T_1574b_row4_col5 {\n","  background-color: #b3c3de;\n","  color: #000000;\n","}\n","#T_1574b_row2_col6, #T_1574b_row4_col6 {\n","  background-color: #e9e5f1;\n","  color: #000000;\n","}\n","#T_1574b_row2_col7, #T_1574b_row4_col7 {\n","  background-color: #c0c9e2;\n","  color: #000000;\n","}\n","#T_1574b_row2_col8, #T_1574b_row4_col8 {\n","  background-color: #dcdaeb;\n","  color: #000000;\n","}\n","#T_1574b_row3_col1 {\n","  background-color: #d7d6e9;\n","  color: #000000;\n","}\n","#T_1574b_row3_col2, #T_1574b_row6_col3 {\n","  background-color: #7bacd1;\n","  color: #f1f1f1;\n","}\n","#T_1574b_row3_col4 {\n","  background-color: #91b5d6;\n","  color: #000000;\n","}\n","#T_1574b_row3_col5 {\n","  background-color: #65a3cb;\n","  color: #f1f1f1;\n","}\n","#T_1574b_row3_col6 {\n","  background-color: #a7bddb;\n","  color: #000000;\n","}\n","#T_1574b_row4_col0, #T_1574b_row6_col7 {\n","  background-color: #d4d4e8;\n","  color: #000000;\n","}\n","#T_1574b_row4_col1 {\n","  background-color: #c5cce3;\n","  color: #000000;\n","}\n","#T_1574b_row4_col3 {\n","  background-color: #60a1ca;\n","  color: #f1f1f1;\n","}\n","#T_1574b_row5_col1 {\n","  background-color: #d5d5e8;\n","  color: #000000;\n","}\n","#T_1574b_row5_col2, #T_1574b_row5_col4 {\n","  background-color: #c1cae2;\n","  color: #000000;\n","}\n","#T_1574b_row5_col3 {\n","  background-color: #4496c3;\n","  color: #f1f1f1;\n","}\n","#T_1574b_row5_col6 {\n","  background-color: #73a9cf;\n","  color: #f1f1f1;\n","}\n","#T_1574b_row5_col7 {\n","  background-color: #0569a5;\n","  color: #f1f1f1;\n","}\n","#T_1574b_row5_col8 {\n","  background-color: #e7e3f0;\n","  color: #000000;\n","}\n","#T_1574b_row6_col0 {\n","  background-color: #8cb3d5;\n","  color: #000000;\n","}\n","#T_1574b_row6_col1 {\n","  background-color: #a5bddb;\n","  color: #000000;\n","}\n","#T_1574b_row6_col2, #T_1574b_row6_col4 {\n","  background-color: #efe9f3;\n","  color: #000000;\n","}\n","#T_1574b_row6_col5 {\n","  background-color: #6ba5cd;\n","  color: #f1f1f1;\n","}\n","#T_1574b_row6_col8, #T_1574b_row7_col0 {\n","  background-color: #e2dfee;\n","  color: #000000;\n","}\n","#T_1574b_row7_col2, #T_1574b_row7_col4, #T_1574b_row8_col0 {\n","  background-color: #c4cbe3;\n","  color: #000000;\n","}\n","#T_1574b_row7_col3 {\n","  background-color: #83afd3;\n","  color: #f1f1f1;\n","}\n","#T_1574b_row7_col5 {\n","  background-color: #0567a2;\n","  color: #f1f1f1;\n","}\n","#T_1574b_row7_col6 {\n","  background-color: #d2d2e7;\n","  color: #000000;\n","}\n","#T_1574b_row8_col1 {\n","  background-color: #dad9ea;\n","  color: #000000;\n","}\n","#T_1574b_row8_col7 {\n","  background-color: #d9d8ea;\n","  color: #000000;\n","}\n","</style>\n","<table id=\"T_1574b\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th class=\"blank level0\" >&nbsp;</th>\n","      <th id=\"T_1574b_level0_col0\" class=\"col_heading level0 col0\" >_trusted_judgments</th>\n","      <th id=\"T_1574b_level0_col1\" class=\"col_heading level0 col1\" >year_of_award</th>\n","      <th id=\"T_1574b_level0_col2\" class=\"col_heading level0 col2\" >race_ethnicity</th>\n","      <th id=\"T_1574b_level0_col3\" class=\"col_heading level0 col3\" >religion</th>\n","      <th id=\"T_1574b_level0_col4\" class=\"col_heading level0 col4\" >sexual_orientation</th>\n","      <th id=\"T_1574b_level0_col5\" class=\"col_heading level0 col5\" >award</th>\n","      <th id=\"T_1574b_level0_col6\" class=\"col_heading level0 col6\" >genre</th>\n","      <th id=\"T_1574b_level0_col7\" class=\"col_heading level0 col7\" >gender</th>\n","      <th id=\"T_1574b_level0_col8\" class=\"col_heading level0 col8\" >region</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th id=\"T_1574b_level0_row0\" class=\"row_heading level0 row0\" >_trusted_judgments</th>\n","      <td id=\"T_1574b_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n","      <td id=\"T_1574b_row0_col1\" class=\"data row0 col1\" >0.194353</td>\n","      <td id=\"T_1574b_row0_col2\" class=\"data row0 col2\" >0.008882</td>\n","      <td id=\"T_1574b_row0_col3\" class=\"data row0 col3\" >-0.242162</td>\n","      <td id=\"T_1574b_row0_col4\" class=\"data row0 col4\" >0.045890</td>\n","      <td id=\"T_1574b_row0_col5\" class=\"data row0 col5\" >0.213423</td>\n","      <td id=\"T_1574b_row0_col6\" class=\"data row0 col6\" >0.305368</td>\n","      <td id=\"T_1574b_row0_col7\" class=\"data row0 col7\" >-0.030773</td>\n","      <td id=\"T_1574b_row0_col8\" class=\"data row0 col8\" >0.112407</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_1574b_level0_row1\" class=\"row_heading level0 row1\" >year_of_award</th>\n","      <td id=\"T_1574b_row1_col0\" class=\"data row1 col0\" >0.194353</td>\n","      <td id=\"T_1574b_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n","      <td id=\"T_1574b_row1_col2\" class=\"data row1 col2\" >0.283789</td>\n","      <td id=\"T_1574b_row1_col3\" class=\"data row1 col3\" >0.124599</td>\n","      <td id=\"T_1574b_row1_col4\" class=\"data row1 col4\" >0.196630</td>\n","      <td id=\"T_1574b_row1_col5\" class=\"data row1 col5\" >0.137364</td>\n","      <td id=\"T_1574b_row1_col6\" class=\"data row1 col6\" >0.300990</td>\n","      <td id=\"T_1574b_row1_col7\" class=\"data row1 col7\" >-0.120610</td>\n","      <td id=\"T_1574b_row1_col8\" class=\"data row1 col8\" >0.110163</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_1574b_level0_row2\" class=\"row_heading level0 row2\" >race_ethnicity</th>\n","      <td id=\"T_1574b_row2_col0\" class=\"data row2 col0\" >0.008882</td>\n","      <td id=\"T_1574b_row2_col1\" class=\"data row2 col1\" >0.283789</td>\n","      <td id=\"T_1574b_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n","      <td id=\"T_1574b_row2_col3\" class=\"data row2 col3\" >0.428190</td>\n","      <td id=\"T_1574b_row2_col4\" class=\"data row2 col4\" >-0.041667</td>\n","      <td id=\"T_1574b_row2_col5\" class=\"data row2 col5\" >0.223359</td>\n","      <td id=\"T_1574b_row2_col6\" class=\"data row2 col6\" >0.014470</td>\n","      <td id=\"T_1574b_row2_col7\" class=\"data row2 col7\" >0.212459</td>\n","      <td id=\"T_1574b_row2_col8\" class=\"data row2 col8\" >-0.102062</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_1574b_level0_row3\" class=\"row_heading level0 row3\" >religion</th>\n","      <td id=\"T_1574b_row3_col0\" class=\"data row3 col0\" >-0.242162</td>\n","      <td id=\"T_1574b_row3_col1\" class=\"data row3 col1\" >0.124599</td>\n","      <td id=\"T_1574b_row3_col2\" class=\"data row3 col2\" >0.428190</td>\n","      <td id=\"T_1574b_row3_col3\" class=\"data row3 col3\" >1.000000</td>\n","      <td id=\"T_1574b_row3_col4\" class=\"data row3 col4\" >0.370012</td>\n","      <td id=\"T_1574b_row3_col5\" class=\"data row3 col5\" >0.445810</td>\n","      <td id=\"T_1574b_row3_col6\" class=\"data row3 col6\" >0.285685</td>\n","      <td id=\"T_1574b_row3_col7\" class=\"data row3 col7\" >0.258314</td>\n","      <td id=\"T_1574b_row3_col8\" class=\"data row3 col8\" >-0.376217</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_1574b_level0_row4\" class=\"row_heading level0 row4\" >sexual_orientation</th>\n","      <td id=\"T_1574b_row4_col0\" class=\"data row4 col0\" >0.045890</td>\n","      <td id=\"T_1574b_row4_col1\" class=\"data row4 col1\" >0.196630</td>\n","      <td id=\"T_1574b_row4_col2\" class=\"data row4 col2\" >-0.041667</td>\n","      <td id=\"T_1574b_row4_col3\" class=\"data row4 col3\" >0.370012</td>\n","      <td id=\"T_1574b_row4_col4\" class=\"data row4 col4\" >1.000000</td>\n","      <td id=\"T_1574b_row4_col5\" class=\"data row4 col5\" >0.223359</td>\n","      <td id=\"T_1574b_row4_col6\" class=\"data row4 col6\" >0.014470</td>\n","      <td id=\"T_1574b_row4_col7\" class=\"data row4 col7\" >0.212459</td>\n","      <td id=\"T_1574b_row4_col8\" class=\"data row4 col8\" >-0.102062</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_1574b_level0_row5\" class=\"row_heading level0 row5\" >award</th>\n","      <td id=\"T_1574b_row5_col0\" class=\"data row5 col0\" >0.213423</td>\n","      <td id=\"T_1574b_row5_col1\" class=\"data row5 col1\" >0.137364</td>\n","      <td id=\"T_1574b_row5_col2\" class=\"data row5 col2\" >0.223359</td>\n","      <td id=\"T_1574b_row5_col3\" class=\"data row5 col3\" >0.445810</td>\n","      <td id=\"T_1574b_row5_col4\" class=\"data row5 col4\" >0.223359</td>\n","      <td id=\"T_1574b_row5_col5\" class=\"data row5 col5\" >1.000000</td>\n","      <td id=\"T_1574b_row5_col6\" class=\"data row5 col6\" >0.432749</td>\n","      <td id=\"T_1574b_row5_col7\" class=\"data row5 col7\" >0.763119</td>\n","      <td id=\"T_1574b_row5_col8\" class=\"data row5 col8\" >-0.172774</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_1574b_level0_row6\" class=\"row_heading level0 row6\" >genre</th>\n","      <td id=\"T_1574b_row6_col0\" class=\"data row6 col0\" >0.305368</td>\n","      <td id=\"T_1574b_row6_col1\" class=\"data row6 col1\" >0.300990</td>\n","      <td id=\"T_1574b_row6_col2\" class=\"data row6 col2\" >0.014470</td>\n","      <td id=\"T_1574b_row6_col3\" class=\"data row6 col3\" >0.285685</td>\n","      <td id=\"T_1574b_row6_col4\" class=\"data row6 col4\" >0.014470</td>\n","      <td id=\"T_1574b_row6_col5\" class=\"data row6 col5\" >0.432749</td>\n","      <td id=\"T_1574b_row6_col6\" class=\"data row6 col6\" >1.000000</td>\n","      <td id=\"T_1574b_row6_col7\" class=\"data row6 col7\" >0.139052</td>\n","      <td id=\"T_1574b_row6_col8\" class=\"data row6 col8\" >-0.141776</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_1574b_level0_row7\" class=\"row_heading level0 row7\" >gender</th>\n","      <td id=\"T_1574b_row7_col0\" class=\"data row7 col0\" >-0.030773</td>\n","      <td id=\"T_1574b_row7_col1\" class=\"data row7 col1\" >-0.120610</td>\n","      <td id=\"T_1574b_row7_col2\" class=\"data row7 col2\" >0.212459</td>\n","      <td id=\"T_1574b_row7_col3\" class=\"data row7 col3\" >0.258314</td>\n","      <td id=\"T_1574b_row7_col4\" class=\"data row7 col4\" >0.212459</td>\n","      <td id=\"T_1574b_row7_col5\" class=\"data row7 col5\" >0.763119</td>\n","      <td id=\"T_1574b_row7_col6\" class=\"data row7 col6\" >0.139052</td>\n","      <td id=\"T_1574b_row7_col7\" class=\"data row7 col7\" >1.000000</td>\n","      <td id=\"T_1574b_row7_col8\" class=\"data row7 col8\" >0.120096</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_1574b_level0_row8\" class=\"row_heading level0 row8\" >region</th>\n","      <td id=\"T_1574b_row8_col0\" class=\"data row8 col0\" >0.112407</td>\n","      <td id=\"T_1574b_row8_col1\" class=\"data row8 col1\" >0.110163</td>\n","      <td id=\"T_1574b_row8_col2\" class=\"data row8 col2\" >-0.102062</td>\n","      <td id=\"T_1574b_row8_col3\" class=\"data row8 col3\" >-0.376217</td>\n","      <td id=\"T_1574b_row8_col4\" class=\"data row8 col4\" >-0.102062</td>\n","      <td id=\"T_1574b_row8_col5\" class=\"data row8 col5\" >-0.172774</td>\n","      <td id=\"T_1574b_row8_col6\" class=\"data row8 col6\" >-0.141776</td>\n","      <td id=\"T_1574b_row8_col7\" class=\"data row8 col7\" >0.120096</td>\n","      <td id=\"T_1574b_row8_col8\" class=\"data row8 col8\" >1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n"]},"metadata":{},"execution_count":72}]},{"cell_type":"markdown","source":["**Observación:**\n","El mapa de correlación muestra que hay una fuerte correlación entre género y premio, seguido de clasificación cinematográfica y premio."],"metadata":{"id":"Sw9RUMglhzY2"}},{"cell_type":"code","source":["# Ruta en la que deseas guardar el archivo en tu Google Drive\n","file_path = '/content/drive/My Drive/Proyecto 7/data/df_concatenado_alta_confianza.pkl'\n","\n","# Guardar el DataFrame en un archivo pickle en Google Drive\n","with open(file_path, 'wb') as f:\n","    pickle.dump(df_concatenado_alta_confianza, f)"],"metadata":{"id":"0UfadrDwK8wS","executionInfo":{"status":"ok","timestamp":1718674137817,"user_tz":240,"elapsed":7,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"execution_count":73,"outputs":[]},{"cell_type":"markdown","source":["# **Transformación de los datos con bajo grado de confiabilidad**"],"metadata":{"id":"IAVv29GzvUbs"}},{"cell_type":"code","source":["# Ruta del archivo en Google Drive\n","ruta_archivo_drive = '/content/drive/My Drive/Proyecto 7/data/df_baja_confianza.pkl'\n","\n","# Cargar el DataFrame desde el archivo\n","with open(ruta_archivo_drive, 'rb') as f:\n","    df_baja_confianza = pickle.load(f)"],"metadata":{"id":"tuqHHwRVvXRf","executionInfo":{"status":"ok","timestamp":1718674137817,"user_tz":240,"elapsed":7,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"execution_count":74,"outputs":[]},{"cell_type":"code","source":["# Agrupar las columnas por Categórica y Numérica\n","Columna_categorica = df_baja_confianza.select_dtypes(include =[\"object\"]).columns\n","Columna_numerica = df_baja_confianza.select_dtypes(include =[\"float64\", \"int64\"]).columns\n","print(\"El total de columnas categoricas son \", len(Columna_categorica))\n","print(\"El total de columnas numéricas son \", len(Columna_numerica))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BjH5aOYNQkjS","executionInfo":{"status":"ok","timestamp":1718674138174,"user_tz":240,"elapsed":364,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"282ab03d-227e-452e-e86c-aaff1a6fa2e5"},"execution_count":75,"outputs":[{"output_type":"stream","name":"stdout","text":["El total de columnas categoricas son  12\n","El total de columnas numéricas son  1\n"]}]},{"cell_type":"code","source":["# Generar gráfica de valores numéricos\n","fig, ax = plt.subplots(nrows=1, ncols=len(Columna_numerica), figsize=(15, 5))\n","\n","\n","if len(Columna_numerica) == 1:\n","    col = Columna_numerica[0]\n","    sns.boxplot(y=col, data=df_baja_confianza, ax=ax, color='skyblue')\n","    ax.axhline(df_baja_confianza[col].median(), color='red', linestyle='--', linewidth=2)\n","    ax.set_title(f'Boxplot de {col}')\n","else:\n","    for i, col in enumerate(Columna_numerica):\n","        sns.boxplot(y=col, data=df_baja_confianza, ax=ax[i], color='skyblue')\n","        ax[i].axhline(df_baja_confianza[col].median(), color='red', linestyle='--', linewidth=2)\n","        ax[i].set_title(f'Boxplot de {col}')\n","\n","# Ajustar el diseño\n","plt.tight_layout()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":398},"id":"ufTSfz6lRCaB","executionInfo":{"status":"ok","timestamp":1718674138174,"user_tz":240,"elapsed":4,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"33615b41-7d28-481f-bd69-42d56b0adc97"},"execution_count":76,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1500x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**Observación:**\n","La columna numérica no presenta datos atípicos."],"metadata":{"id":"Lt0rBte2SUNs"}},{"cell_type":"code","source":["# Se identifica las columnas que son categóricas\n","df_categorica2 = df_baja_confianza.select_dtypes(include=['object']).columns\n","df_new_categorica2 = df_baja_confianza[df_categorica2]\n","df_new_categorica2.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cp28O_QOvjWa","executionInfo":{"status":"ok","timestamp":1718674138515,"user_tz":240,"elapsed":344,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"8391fb3d-8439-4a11-bbaf-56e9f09c4cba"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 414 entries, 0 to 440\n","Data columns (total 12 columns):\n"," #   Column              Non-Null Count  Dtype \n","---  ------              --------------  ----- \n"," 0   birthplace          414 non-null    object\n"," 1   date_of_birth       414 non-null    object\n"," 2   race_ethnicity      414 non-null    object\n"," 3   religion            414 non-null    object\n"," 4   sexual_orientation  414 non-null    object\n"," 5   award               414 non-null    object\n"," 6   biourl              414 non-null    object\n"," 7   movie               414 non-null    object\n"," 8   person              414 non-null    object\n"," 9   genre               414 non-null    object\n"," 10  gender              414 non-null    object\n"," 11  region              414 non-null    object\n","dtypes: object(12)\n","memory usage: 42.0+ KB\n"]}]},{"cell_type":"code","source":["# También se opta por eliminar columnas que no son relevantes para el análisis.\n","df_new_categorica2 = df_new_categorica2.drop(columns=['biourl', 'movie', 'person', \"birthplace\"])"],"metadata":{"id":"Yd4VY7HlvsKs","executionInfo":{"status":"ok","timestamp":1718674138515,"user_tz":240,"elapsed":5,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"execution_count":78,"outputs":[]},{"cell_type":"code","source":["# Se decide eliminar la columna \"date_of_birth\", ya que contiene información que parece tener errores.\n","df_new_categorica2 = df_new_categorica2.drop(columns=[\"date_of_birth\"])"],"metadata":{"id":"Nx9HiG9b92v0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Transformación de los datos**"],"metadata":{"id":"2xfJRcF27GRS"}},{"cell_type":"markdown","source":["El siguiente paso será convertir las columnas categóricas en variables numéricas usando la técnica de EmbeddingEncoder.\n","Los embeddings proporcionan una forma conveniente y efectiva de transformar características categóricas en representaciones numéricas densas (embeddings) que pueden ser utilizadas como características en modelos de aprendizaje automático. Esto permite capturar relaciones más complejas entre las categorías y reducir la dimensionalidad de los datos."],"metadata":{"id":"KsCBxSmm7QfF"}},{"cell_type":"code","source":["# Se hace una copia de df_alta_confianza y se eliminan las columnas de variables \"object\"\n","df_baja_confianza_copy = df_baja_confianza.copy()\n","df_baja_confianza_copy = df_baja_confianza_copy.select_dtypes(exclude=['object'])\n","\n","# Obtener una copia del DataFrame\n","df_encoded_bc = df_new_categorica2.copy()\n","\n","# Definir el tamaño del embedding\n","embedding_dim = 10  # Puedes ajustar este valor según tus necesidades\n","\n","# Crear embeddings para cada columna categórica\n","category_embedding = {}\n","\n","# Crear embeddings para cada columna categórica\n","for column in df_encoded_bc.columns:\n","    if df_encoded_bc[column].dtype == 'object':  # Si la columna es categórica\n","        unique_categories = df_encoded_bc[column].unique()\n","        category_embedding = dict(zip(unique_categories, range(1, len(unique_categories) + 1)))  # Asignar un número único a cada categoría\n","        df_encoded_bc[column] = df_encoded_bc[column].map(category_embedding).fillna(0)  # Llenar los valores NaN con 0\n","\n","# Mostrar el DataFrame transformado\n","print(df_encoded_bc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Zk-NIrBO7fZe","executionInfo":{"status":"ok","timestamp":1718674138813,"user_tz":240,"elapsed":10,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"3adae8eb-6952-4c46-e63a-0c30ce9c19ae"},"execution_count":82,"outputs":[{"output_type":"stream","name":"stdout","text":["     race_ethnicity  religion  sexual_orientation  award  genre  gender  \\\n","0                 1         1                   1      1      1       1   \n","1                 1         2                   1      1      2       1   \n","2                 1         3                   1      1      3       1   \n","3                 1         4                   1      1      1       1   \n","4                 1         1                   1      1      2       1   \n","..              ...       ...                 ...    ...    ...     ...   \n","436               1         2                   1      5      2       2   \n","437               1         1                   1      1      2       1   \n","438               1        21                   1      3      2       1   \n","439               1        13                   1      3      2       1   \n","440               1        14                   1      1      6       1   \n","\n","     region  \n","0         1  \n","1         1  \n","2         1  \n","3         2  \n","4         2  \n","..      ...  \n","436       1  \n","437       1  \n","438       2  \n","439       2  \n","440       2  \n","\n","[414 rows x 7 columns]\n"]}]},{"cell_type":"code","source":["# Concatenar df_encoded_bc con df_baja_confianza_copy\n","df_concatenado_baja_confianza = pd.concat([df_baja_confianza_copy, df_encoded_bc], axis=1)\n","\n","df_concatenado_baja_confianza.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"T0kAXOCR5ANi","executionInfo":{"status":"ok","timestamp":1718674138813,"user_tz":240,"elapsed":9,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"67993d67-0b58-4a08-95ec-d37f0b187a7a"},"execution_count":83,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Index: 414 entries, 0 to 440\n","Data columns (total 8 columns):\n"," #   Column              Non-Null Count  Dtype\n","---  ------              --------------  -----\n"," 0   year_of_award       414 non-null    int64\n"," 1   race_ethnicity      414 non-null    int64\n"," 2   religion            414 non-null    int64\n"," 3   sexual_orientation  414 non-null    int64\n"," 4   award               414 non-null    int64\n"," 5   genre               414 non-null    int64\n"," 6   gender              414 non-null    int64\n"," 7   region              414 non-null    int64\n","dtypes: int64(8)\n","memory usage: 29.1 KB\n"]}]},{"cell_type":"code","source":["# Analizamos mapa de correlación\n","corr = df_concatenado_baja_confianza.corr()\n","corr.style.background_gradient()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"X-R3rc-76QFI","executionInfo":{"status":"ok","timestamp":1718674138813,"user_tz":240,"elapsed":6,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"8f086c3a-1817-4108-f060-5a29dda91d92"},"execution_count":84,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<pandas.io.formats.style.Styler at 0x7c8fd7a3b790>"],"text/html":["<style type=\"text/css\">\n","#T_57e74_row0_col0, #T_57e74_row1_col1, #T_57e74_row2_col2, #T_57e74_row3_col3, #T_57e74_row4_col4, #T_57e74_row5_col5, #T_57e74_row6_col6, #T_57e74_row7_col7 {\n","  background-color: #023858;\n","  color: #f1f1f1;\n","}\n","#T_57e74_row0_col1 {\n","  background-color: #dbdaeb;\n","  color: #000000;\n","}\n","#T_57e74_row0_col2 {\n","  background-color: #f4eef6;\n","  color: #000000;\n","}\n","#T_57e74_row0_col3 {\n","  background-color: #f8f1f8;\n","  color: #000000;\n","}\n","#T_57e74_row0_col4 {\n","  background-color: #ebe6f2;\n","  color: #000000;\n","}\n","#T_57e74_row0_col5 {\n","  background-color: #ced0e6;\n","  color: #000000;\n","}\n","#T_57e74_row0_col6 {\n","  background-color: #eee8f3;\n","  color: #000000;\n","}\n","#T_57e74_row0_col7, #T_57e74_row1_col7, #T_57e74_row7_col1 {\n","  background-color: #f0eaf4;\n","  color: #000000;\n","}\n","#T_57e74_row1_col0 {\n","  background-color: #d8d7e9;\n","  color: #000000;\n","}\n","#T_57e74_row1_col2, #T_57e74_row4_col7, #T_57e74_row6_col3 {\n","  background-color: #f1ebf5;\n","  color: #000000;\n","}\n","#T_57e74_row1_col3, #T_57e74_row6_col7 {\n","  background-color: #f3edf5;\n","  color: #000000;\n","}\n","#T_57e74_row1_col4, #T_57e74_row5_col2 {\n","  background-color: #e7e3f0;\n","  color: #000000;\n","}\n","#T_57e74_row1_col5, #T_57e74_row3_col6 {\n","  background-color: #ece7f2;\n","  color: #000000;\n","}\n","#T_57e74_row1_col6 {\n","  background-color: #efe9f3;\n","  color: #000000;\n","}\n","#T_57e74_row2_col0 {\n","  background-color: #fcf4fa;\n","  color: #000000;\n","}\n","#T_57e74_row2_col1, #T_57e74_row5_col1 {\n","  background-color: #fbf4f9;\n","  color: #000000;\n","}\n","#T_57e74_row2_col3, #T_57e74_row3_col0, #T_57e74_row3_col2, #T_57e74_row3_col7, #T_57e74_row5_col4, #T_57e74_row5_col6, #T_57e74_row6_col1, #T_57e74_row6_col5 {\n","  background-color: #fff7fb;\n","  color: #000000;\n","}\n","#T_57e74_row2_col4, #T_57e74_row4_col2 {\n","  background-color: #dcdaeb;\n","  color: #000000;\n","}\n","#T_57e74_row2_col5, #T_57e74_row7_col6 {\n","  background-color: #e0dded;\n","  color: #000000;\n","}\n","#T_57e74_row2_col6 {\n","  background-color: #e6e2ef;\n","  color: #000000;\n","}\n","#T_57e74_row2_col7, #T_57e74_row4_col5 {\n","  background-color: #faf2f8;\n","  color: #000000;\n","}\n","#T_57e74_row3_col1 {\n","  background-color: #fef6fa;\n","  color: #000000;\n","}\n","#T_57e74_row3_col4, #T_57e74_row4_col3 {\n","  background-color: #f5eff6;\n","  color: #000000;\n","}\n","#T_57e74_row3_col5, #T_57e74_row6_col2 {\n","  background-color: #ede8f3;\n","  color: #000000;\n","}\n","#T_57e74_row4_col0, #T_57e74_row4_col1, #T_57e74_row5_col3 {\n","  background-color: #f2ecf5;\n","  color: #000000;\n","}\n","#T_57e74_row4_col6 {\n","  background-color: #046299;\n","  color: #f1f1f1;\n","}\n","#T_57e74_row5_col0 {\n","  background-color: #dfddec;\n","  color: #000000;\n","}\n","#T_57e74_row5_col7 {\n","  background-color: #f7f0f7;\n","  color: #000000;\n","}\n","#T_57e74_row6_col0 {\n","  background-color: #faf3f9;\n","  color: #000000;\n","}\n","#T_57e74_row6_col4 {\n","  background-color: #04629a;\n","  color: #f1f1f1;\n","}\n","#T_57e74_row7_col0 {\n","  background-color: #ede7f2;\n","  color: #000000;\n","}\n","#T_57e74_row7_col2 {\n","  background-color: #eee9f3;\n","  color: #000000;\n","}\n","#T_57e74_row7_col3 {\n","  background-color: #f4edf6;\n","  color: #000000;\n","}\n","#T_57e74_row7_col4 {\n","  background-color: #e4e1ef;\n","  color: #000000;\n","}\n","#T_57e74_row7_col5 {\n","  background-color: #e5e1ef;\n","  color: #000000;\n","}\n","</style>\n","<table id=\"T_57e74\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th class=\"blank level0\" >&nbsp;</th>\n","      <th id=\"T_57e74_level0_col0\" class=\"col_heading level0 col0\" >year_of_award</th>\n","      <th id=\"T_57e74_level0_col1\" class=\"col_heading level0 col1\" >race_ethnicity</th>\n","      <th id=\"T_57e74_level0_col2\" class=\"col_heading level0 col2\" >religion</th>\n","      <th id=\"T_57e74_level0_col3\" class=\"col_heading level0 col3\" >sexual_orientation</th>\n","      <th id=\"T_57e74_level0_col4\" class=\"col_heading level0 col4\" >award</th>\n","      <th id=\"T_57e74_level0_col5\" class=\"col_heading level0 col5\" >genre</th>\n","      <th id=\"T_57e74_level0_col6\" class=\"col_heading level0 col6\" >gender</th>\n","      <th id=\"T_57e74_level0_col7\" class=\"col_heading level0 col7\" >region</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th id=\"T_57e74_level0_row0\" class=\"row_heading level0 row0\" >year_of_award</th>\n","      <td id=\"T_57e74_row0_col0\" class=\"data row0 col0\" >1.000000</td>\n","      <td id=\"T_57e74_row0_col1\" class=\"data row0 col1\" >0.189201</td>\n","      <td id=\"T_57e74_row0_col2\" class=\"data row0 col2\" >-0.013356</td>\n","      <td id=\"T_57e74_row0_col3\" class=\"data row0 col3\" >-0.035997</td>\n","      <td id=\"T_57e74_row0_col4\" class=\"data row0 col4\" >0.049016</td>\n","      <td id=\"T_57e74_row0_col5\" class=\"data row0 col5\" >0.154386</td>\n","      <td id=\"T_57e74_row0_col6\" class=\"data row0 col6\" >-0.000882</td>\n","      <td id=\"T_57e74_row0_col7\" class=\"data row0 col7\" >0.091821</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_57e74_level0_row1\" class=\"row_heading level0 row1\" >race_ethnicity</th>\n","      <td id=\"T_57e74_row1_col0\" class=\"data row1 col0\" >0.189201</td>\n","      <td id=\"T_57e74_row1_col1\" class=\"data row1 col1\" >1.000000</td>\n","      <td id=\"T_57e74_row1_col2\" class=\"data row1 col2\" >0.010360</td>\n","      <td id=\"T_57e74_row1_col3\" class=\"data row1 col3\" >-0.001663</td>\n","      <td id=\"T_57e74_row1_col4\" class=\"data row1 col4\" >0.072748</td>\n","      <td id=\"T_57e74_row1_col5\" class=\"data row1 col5\" >0.011541</td>\n","      <td id=\"T_57e74_row1_col6\" class=\"data row1 col6\" >-0.013470</td>\n","      <td id=\"T_57e74_row1_col7\" class=\"data row1 col7\" >0.093206</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_57e74_level0_row2\" class=\"row_heading level0 row2\" >religion</th>\n","      <td id=\"T_57e74_row2_col0\" class=\"data row2 col0\" >-0.013356</td>\n","      <td id=\"T_57e74_row2_col1\" class=\"data row2 col1\" >0.010360</td>\n","      <td id=\"T_57e74_row2_col2\" class=\"data row2 col2\" >1.000000</td>\n","      <td id=\"T_57e74_row2_col3\" class=\"data row2 col3\" >-0.090952</td>\n","      <td id=\"T_57e74_row2_col4\" class=\"data row2 col4\" >0.123671</td>\n","      <td id=\"T_57e74_row2_col5\" class=\"data row2 col5\" >0.074237</td>\n","      <td id=\"T_57e74_row2_col6\" class=\"data row2 col6\" >0.039566</td>\n","      <td id=\"T_57e74_row2_col7\" class=\"data row2 col7\" >0.028445</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_57e74_level0_row3\" class=\"row_heading level0 row3\" >sexual_orientation</th>\n","      <td id=\"T_57e74_row3_col0\" class=\"data row3 col0\" >-0.035997</td>\n","      <td id=\"T_57e74_row3_col1\" class=\"data row3 col1\" >-0.001663</td>\n","      <td id=\"T_57e74_row3_col2\" class=\"data row3 col2\" >-0.090952</td>\n","      <td id=\"T_57e74_row3_col3\" class=\"data row3 col3\" >1.000000</td>\n","      <td id=\"T_57e74_row3_col4\" class=\"data row3 col4\" >-0.020398</td>\n","      <td id=\"T_57e74_row3_col5\" class=\"data row3 col5\" >0.002214</td>\n","      <td id=\"T_57e74_row3_col6\" class=\"data row3 col6\" >0.010426</td>\n","      <td id=\"T_57e74_row3_col7\" class=\"data row3 col7\" >-0.009740</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_57e74_level0_row4\" class=\"row_heading level0 row4\" >award</th>\n","      <td id=\"T_57e74_row4_col0\" class=\"data row4 col0\" >0.049016</td>\n","      <td id=\"T_57e74_row4_col1\" class=\"data row4 col1\" >0.072748</td>\n","      <td id=\"T_57e74_row4_col2\" class=\"data row4 col2\" >0.123671</td>\n","      <td id=\"T_57e74_row4_col3\" class=\"data row4 col3\" >-0.020398</td>\n","      <td id=\"T_57e74_row4_col4\" class=\"data row4 col4\" >1.000000</td>\n","      <td id=\"T_57e74_row4_col5\" class=\"data row4 col5\" >-0.092388</td>\n","      <td id=\"T_57e74_row4_col6\" class=\"data row4 col6\" >0.808280</td>\n","      <td id=\"T_57e74_row4_col7\" class=\"data row4 col7\" >0.083949</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_57e74_level0_row5\" class=\"row_heading level0 row5\" >genre</th>\n","      <td id=\"T_57e74_row5_col0\" class=\"data row5 col0\" >0.154386</td>\n","      <td id=\"T_57e74_row5_col1\" class=\"data row5 col1\" >0.011541</td>\n","      <td id=\"T_57e74_row5_col2\" class=\"data row5 col2\" >0.074237</td>\n","      <td id=\"T_57e74_row5_col3\" class=\"data row5 col3\" >0.002214</td>\n","      <td id=\"T_57e74_row5_col4\" class=\"data row5 col4\" >-0.092388</td>\n","      <td id=\"T_57e74_row5_col5\" class=\"data row5 col5\" >1.000000</td>\n","      <td id=\"T_57e74_row5_col6\" class=\"data row5 col6\" >-0.133597</td>\n","      <td id=\"T_57e74_row5_col7\" class=\"data row5 col7\" >0.044728</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_57e74_level0_row6\" class=\"row_heading level0 row6\" >gender</th>\n","      <td id=\"T_57e74_row6_col0\" class=\"data row6 col0\" >-0.000882</td>\n","      <td id=\"T_57e74_row6_col1\" class=\"data row6 col1\" >-0.013470</td>\n","      <td id=\"T_57e74_row6_col2\" class=\"data row6 col2\" >0.039566</td>\n","      <td id=\"T_57e74_row6_col3\" class=\"data row6 col3\" >0.010426</td>\n","      <td id=\"T_57e74_row6_col4\" class=\"data row6 col4\" >0.808280</td>\n","      <td id=\"T_57e74_row6_col5\" class=\"data row6 col5\" >-0.133597</td>\n","      <td id=\"T_57e74_row6_col6\" class=\"data row6 col6\" >1.000000</td>\n","      <td id=\"T_57e74_row6_col7\" class=\"data row6 col7\" >0.070678</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_57e74_level0_row7\" class=\"row_heading level0 row7\" >region</th>\n","      <td id=\"T_57e74_row7_col0\" class=\"data row7 col0\" >0.091821</td>\n","      <td id=\"T_57e74_row7_col1\" class=\"data row7 col1\" >0.093206</td>\n","      <td id=\"T_57e74_row7_col2\" class=\"data row7 col2\" >0.028445</td>\n","      <td id=\"T_57e74_row7_col3\" class=\"data row7 col3\" >-0.009740</td>\n","      <td id=\"T_57e74_row7_col4\" class=\"data row7 col4\" >0.083949</td>\n","      <td id=\"T_57e74_row7_col5\" class=\"data row7 col5\" >0.044728</td>\n","      <td id=\"T_57e74_row7_col6\" class=\"data row7 col6\" >0.070678</td>\n","      <td id=\"T_57e74_row7_col7\" class=\"data row7 col7\" >1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n"]},"metadata":{},"execution_count":84}]},{"cell_type":"markdown","source":["**Observación:**\n","Ahora que todas las variables son de tipo numérica, podemos analizar un mapa de correlación donde muestra una fuerte correlación entre género y premio."],"metadata":{"id":"zCqT-hso6laT"}},{"cell_type":"code","source":["# Ruta donde se guardará el archivo pickle en Google Drive\n","ruta_pickle = \"/content/drive/My Drive/Proyecto 7/data/df_concatenado_baja_confianza.pickle\"\n","\n","# Guardar el DataFrame en un archivo pickle en Google Drive\n","with open(ruta_pickle, 'wb') as f:\n","    pickle.dump(df_concatenado_baja_confianza, f)\n","\n"],"metadata":{"id":"F1O4YWOF_e-5","executionInfo":{"status":"ok","timestamp":1718674138814,"user_tz":240,"elapsed":5,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"execution_count":85,"outputs":[]}]}