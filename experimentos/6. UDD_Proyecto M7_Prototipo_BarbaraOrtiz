{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPz2ZC9Cqmex5GWWqpi11BN"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["## **Prototipo**"],"metadata":{"id":"wIbk7Zxt_o-f"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"2xnHry59_nwK"},"outputs":[],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score\n","import pickle\n","\n","# Función para mapear películas a géneros\n","def map_movie_by_genre(movie):\n","    for genre, movies in movies_to_genre.items():\n","        if movie in movies:\n","            return genre\n","    return \"Other\"  # Si no se encuentra la película, se asigna como \"Other\"\n","\n","\n","# Función para mapear personas a géneros\n","def map_person_by_gender(person):\n","    for gender, people in person_by_gender.items():\n","        if person in people:\n","            return gender\n","    return \"No clasificado\"  # Si no se encuentra la persona, se asigna como \"No clasificado\"\n","\n","\n","class Predictor:\n","\n","    def __init__(self, data_path):\n","        self.df = pd.read_csv(data_path)\n","\n","    def preprocess_data(self):\n","        self.df =\n"]},{"cell_type":"code","source":["clasi"],"metadata":{"id":"G8MGFJohAi__"},"execution_count":null,"outputs":[]}]}