{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNPEs1ekQ2REgbnlsCnwT+E"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["En este notebook aplicaremos Machine Learning, donde se aplicará Refresión logística para los datos de alta confianza."],"metadata":{"id":"dvLgDhw4M4lo"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uFAQ0z0WNvEB","executionInfo":{"status":"ok","timestamp":1718951730152,"user_tz":240,"elapsed":2851,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"a12dc80b-70eb-475d-baa5-928449e91fe5"},"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","execution_count":21,"metadata":{"id":"K0TdbW7U_zug","executionInfo":{"status":"ok","timestamp":1718951730153,"user_tz":240,"elapsed":6,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"outputs":[],"source":["import pickle\n","import pandas as pd\n","import numpy as np\n","\n","from sklearn.model_selection import GridSearchCV, train_test_split, StratifiedKFold, cross_val_score, cross_validate\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","from sklearn.metrics import confusion_matrix, accuracy_score\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.metrics import accuracy_score, classification_report\n","from sklearn.decomposition import PCA\n","from statsmodels.stats.outliers_influence import variance_inflation_factor\n","from sklearn.metrics import make_scorer, accuracy_score, precision_score, recall_score, f1_score\n","from sklearn.pipeline import Pipeline\n","\n"]},{"cell_type":"markdown","source":["**Cargar los datos de alta confianza transformados**"],"metadata":{"id":"V16HiISI509X"}},{"cell_type":"code","source":["# Ruta del archivo original en Google Drive\n","ruta_archivo_drive = \"/content/drive/My Drive/Proyecto 7/data/df_concatenado.pkl\"\n","\n","# Cargar el DataFrame desde el archivo\n","with open(ruta_archivo_drive, 'rb') as f:\n","    df_concatenado = pickle.load(f)"],"metadata":{"id":"5Z8BUJvS-rEQ","executionInfo":{"status":"ok","timestamp":1718951730786,"user_tz":240,"elapsed":637,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["# Paso 1: Separar las características y la etiqueta\n","X = df_concatenado.drop('gender', axis=1)\n","y = df_concatenado['gender']"],"metadata":{"id":"sdbT_EbnLN_n","executionInfo":{"status":"ok","timestamp":1718951730786,"user_tz":240,"elapsed":8,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"execution_count":23,"outputs":[]},{"cell_type":"markdown","source":["**Observación:**\n","La variable objetivo será predecir cuál género ganará un oscar."],"metadata":{"id":"0rxDGZU6u3UZ"}},{"cell_type":"code","source":["# Paso 2: Dividir los datos en conjuntos de entrenamiento y prueba\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n"],"metadata":{"id":"mFwaBfKXzjtH","executionInfo":{"status":"ok","timestamp":1718951730787,"user_tz":240,"elapsed":8,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"execution_count":24,"outputs":[]},{"cell_type":"markdown","source":["A continuación, aplicaremos **PCA** sólo en el conjunto de entrenamiento y utilizará los parámetros aprendidos para transformar el conjunto de prueba.\n","\n","Los datos se dividen en conjuntos de entrenamiento y prueba antes de aplicar PCA para evitar el data leakage.\n","\n","Es recomendable escalar los datos antes de aplicar PCA para asegurar que todas las características contribuyan equitativamente.\n","Este enfoque garantiza que el modelo se entrene y evalúe de manera adecuada y que los resultados sean representativos del rendimiento real del modelo en datos no vistos.\n","\n","\n","\n","\n","\n"],"metadata":{"id":"txcBQ6I1i2gG"}},{"cell_type":"code","source":["# Paso 3: Preprocesamiento - Escalado de características\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)\n","\n","\n","# Aplicar PCA sin especificar el número de componentes\n","pca = PCA()\n","pca.fit(X_train_scaled)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"NzW4LOjwiynX","executionInfo":{"status":"ok","timestamp":1718951730787,"user_tz":240,"elapsed":8,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"60574a12-feeb-4b91-d66d-e0771a9618f6"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PCA()"],"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>PCA()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PCA</label><div class=\"sk-toggleable__content\"><pre>PCA()</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# Paso 4: Varianza explicada por cada componente\n","explained_variance_ratio = pca.explained_variance_ratio_\n","\n","# Calcular el número de componentes principales\n","n_components = len(explained_variance_ratio)\n","\n","# Crear un gráfico de codo\n","cumulative_variance = np.cumsum(explained_variance_ratio)\n","plt.plot(range(1, n_components + 1), cumulative_variance, marker='o', linestyle='-')\n","plt.xlabel('Número de Componentes Principales')\n","plt.ylabel('Varianza Explicada')\n","plt.title('Gráfico de Codo para PCA')\n","plt.grid(True)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":473},"id":"Kpzo7ag_kvc7","executionInfo":{"status":"ok","timestamp":1718951731468,"user_tz":240,"elapsed":686,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"57878136-72a5-4c9b-abfb-777bce00f6c8"},"execution_count":26,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**El gráfico de codo** es una herramienta útil para determinar el número óptimo de componentes principales a retener en un análisis.\n","Según la gráfica, el punto en el que la curva forma un codo es en el punto **8**, lo que indica que agregar más componentes principales ya no proporciona una ganancia significativa en términos de varianza explicada.\n","Como conslusión, **la cantidad óptima es 8**"],"metadata":{"id":"xCm1xOfjoe2l"}},{"cell_type":"code","source":["# Análisis de componentes principales\n","print(\"Varianza explicada por cada componente:\", pca.explained_variance_ratio_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oQsOaDfqqjh7","executionInfo":{"status":"ok","timestamp":1718951731469,"user_tz":240,"elapsed":5,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"1f6cbad9-eb6d-4531-a196-c46b36562564"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Varianza explicada por cada componente: [3.03176464e-01 1.35152429e-01 1.14472804e-01 1.07971736e-01\n"," 9.56186633e-02 9.25867048e-02 8.06658598e-02 6.97338428e-02\n"," 6.21495916e-04 5.29875152e-33]\n"]}]},{"cell_type":"markdown","source":["\n","Para cada componente principal, el valor indicado es la proporción de la varianza total de los datos que es explicada por ese componente en particular.\n","\n","Para este caso, los valores representan la varianza explicada por cada uno de los primeros 8 componentes principales, en orden descendente de importancia.\n","\n","Esto es útil para entender cuánta información de los datos originales está capturada por cada componente principal. En general, se prefiere retener los componentes principales que explican la mayor parte de la varianza en los datos, mientras se reduce la dimensionalidad"],"metadata":{"id":"SwGFHtvXqa-7"}},{"cell_type":"code","source":["# Paso 4: Aplicar PCA en el conjunto de entrenamiento\n","pca = PCA(n_components=8)  # Número óptimo de componentes\n","X_train_pca = pca.fit_transform(X_train_scaled)\n","X_test_pca = pca.transform(X_test_scaled)"],"metadata":{"id":"5yQkd8eCkzQt","executionInfo":{"status":"ok","timestamp":1718951731469,"user_tz":240,"elapsed":3,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"execution_count":28,"outputs":[]},{"cell_type":"markdown","source":["A continuación se encontrarán los hiperparámetros óptimos en un modelo de regresión logística mediante la búsqueda de malla.\n","\n","Algunos de los beneficios de encontrár los hiperparámetros óptimos son:\n","1. **Mejora del Rendimiento del Modelo**\n","- Los hiperparámetros afectan directamente la capacidad del modelo para aprender y generalizar a partir de los datos. Encontrar los valores óptimos puede significar una diferencia significativa en el rendimiento del modelo, tanto en términos de precisión como de otras métricas de evaluación (recall, F1-score, etc.).\n","\n","2. **Control del Sobreajuste y Subajuste**\n","- Sobreajuste (Overfitting): Esto ocurre cuando el modelo es demasiado complejo y se ajusta demasiado bien a los datos de entrenamiento, capturando incluso el ruido. Esto resulta en un mal rendimiento en datos nuevos. Ajustar hiperparámetros como C en regresión logística ayuda a controlar la regularización y prevenir el sobreajuste.\n","\n","- Subajuste (Underfitting): Esto ocurre cuando el modelo es demasiado simple y no captura la complejidad de los datos, resultando en un mal rendimiento tanto en el conjunto de entrenamiento como en el de prueba. Encontrar los hiperparámetros correctos puede aumentar la capacidad del modelo para aprender patrones significativos."],"metadata":{"id":"8IdOuL24JYJU"}},{"cell_type":"code","source":["# Paso 5: Definir el modelo\n","model = LogisticRegression()\n","\n","# Paso 6: Definir la cuadrícula de hiperparámetros para LogisticRegression\n","param_grid = {\n","    'C': [0.1, 1, 10, 100],  # Valores sugeridos para la regularización\n","    'solver': ['liblinear', 'lbfgs'],  # Solvers comúnmente utilizados\n","    'penalty': ['l2'],  # Tipo de penalización\n","    'max_iter': [100, 200, 300]  # Iteraciones máximas para la convergencia\n","}\n","\n","# Paso 7: Configurar GridSearchCV\n","grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=5, scoring='accuracy')\n","\n","# Paso 8: Entrenar el modelo con GridSearchCV\n","grid_search.fit(X_train_pca, y_train)\n","\n","# Mostrar los mejores hiperparámetros\n","print(\"Mejores hiperparámetros:\", grid_search.best_params_)\n","\n","# Paso 9: Evaluar el modelo con los mejores hiperparámetros en el conjunto de prueba\n","best_model = grid_search.best_estimator_\n","y_pred = best_model.predict(X_test_pca)\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f'Accuracy: {accuracy}')\n","\n","print(classification_report(y_test, y_pred))\n","\n","# Calcular la matriz de confusión\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","print(conf_matrix)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SC7Q9w9YDGnI","executionInfo":{"status":"ok","timestamp":1718951732634,"user_tz":240,"elapsed":1168,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"bd0976f7-acf0-4378-d247-5ee24fab23df"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Mejores hiperparámetros: {'C': 0.1, 'max_iter': 100, 'penalty': 'l2', 'solver': 'liblinear'}\n","Accuracy: 0.9772727272727273\n","              precision    recall  f1-score   support\n","\n","           1       1.00      0.97      0.98        59\n","           2       0.94      1.00      0.97        29\n","\n","    accuracy                           0.98        88\n","   macro avg       0.97      0.98      0.97        88\n","weighted avg       0.98      0.98      0.98        88\n","\n","[[57  2]\n"," [ 0 29]]\n"]}]},{"cell_type":"markdown","source":["**Observación:**\n","Los resultados muestran que los mejores hiperparámetros encontrados mediante GridSearchCV han proporcionado un modelo con una alta precisión y exactitud. Aquí está el resumen:\n","\n","**Resultados de la Búsqueda de Hiperparámetros**\n","Mejores Hiperparámetros: {'C': 0.1, 'max_iter': 100, 'penalty': 'l2', 'solver': 'liblinear'}\n","Accuracy en el Conjunto de Prueba: 0.9772727272727273\n","\n","**Interpretación**\n","- Precisión y Recall:\n","Para la clase 1, la precisión es 1.00 y el recall es 0.97, lo que indica que el modelo identifica correctamente casi todos los casos de esta clase, aunque tiene unos pocos falsos positivos.\n","Para la clase 2, la precisión es 0.94 y el recall es 1.00, lo que indica que el modelo identifica correctamente todos los casos de esta clase, aunque tiene unos pocos falsos negativos.\n","\n","- F1-Score: El f1-score es alto para ambas clases, lo que sugiere que el modelo está bien equilibrado en términos de precisión y recall."],"metadata":{"id":"CyWQdqRVGEed"}},{"cell_type":"code","source":["# Crear el pipeline\n","pipeline = Pipeline([\n","    ('scaler', StandardScaler()),\n","    ('pca', PCA(n_components=8)),\n","    ('logreg', LogisticRegression())\n","])\n","\n","# Definir el grid de hiperparámetros\n","param_grid = {\n","    'logreg__C': [0.1, 1, 10, 100],\n","    'logreg__solver': ['liblinear', 'lbfgs'],\n","    'logreg__penalty': ['l2'],\n","    'logreg__max_iter': [100, 200, 300]\n","}\n","\n","# Configurar GridSearchCV\n","grid_search = GridSearchCV(estimator=pipeline, param_grid=param_grid, cv=StratifiedKFold(n_splits=5, shuffle=True, random_state=42), scoring='accuracy')\n","\n","# Entrenar el modelo\n","grid_search.fit(X_train, y_train)\n","\n","# Mostrar los mejores hiperparámetros\n","print(f\"Mejores hiperparámetros: {grid_search.best_params_}\")\n","\n","# Evaluar el mejor modelo\n","best_model = grid_search.best_estimator_\n","y_pred = best_model.predict(X_test)\n","accuracy = accuracy_score(y_test, y_pred)\n","print(f'Accuracy: {accuracy}')\n","print(classification_report(y_test, y_pred))\n","print(confusion_matrix(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WPk_BpmIEEH9","executionInfo":{"status":"ok","timestamp":1718951735960,"user_tz":240,"elapsed":3330,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"47ffc6d6-6949-485e-f0df-6cfec8fdfc82"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Mejores hiperparámetros: {'logreg__C': 0.1, 'logreg__max_iter': 100, 'logreg__penalty': 'l2', 'logreg__solver': 'lbfgs'}\n","Accuracy: 0.9659090909090909\n","              precision    recall  f1-score   support\n","\n","           1       0.98      0.97      0.97        59\n","           2       0.93      0.97      0.95        29\n","\n","    accuracy                           0.97        88\n","   macro avg       0.96      0.97      0.96        88\n","weighted avg       0.97      0.97      0.97        88\n","\n","[[57  2]\n"," [ 1 28]]\n"]}]},{"cell_type":"markdown","source":["Un pipeline ayuda a simplificar el código al encapsular todas las etapas del flujo de trabajo en un solo objeto. Esto hace que el código sea más limpio y más fácil de leer, mantener y modificar. Por ejemplo, en lugar de aplicar cada transformación y ajuste del modelo por separado, todo se maneja a través del pipeline."],"metadata":{"id":"PT1K13L9Kcrw"}},{"cell_type":"markdown","source":["**Explicación**\n","\n","- Creación del Pipeline: El pipeline incluye tres pasos: escalado de los datos (StandardScaler), reducción de dimensionalidad (PCA con 8 componentes) y el clasificador (LogisticRegression).\n","\n","- Definición del Grid de Hiperparámetros: Se define un diccionario con los hiperparámetros a explorar durante la búsqueda. En este caso, se varían C, solver, penalty y max_iter para LogisticRegression.\n","\n","- Configuración de GridSearchCV: Se configura GridSearchCV para realizar la búsqueda de hiperparámetros con validación cruzada (k-fold estratificada con 5 folds).\n","\n","- Entrenamiento del Modelo: Se ajusta el grid_search al conjunto de entrenamiento para encontrar los mejores hiperparámetros.\n","\n","- Evaluación del Mejor Modelo: Se selecciona el mejor estimador (best_estimator_), se predicen las etiquetas para el conjunto de prueba y se evalúa el rendimiento del modelo usando accuracy_score, classification_report y confusion_matrix."],"metadata":{"id":"o5Ol1FNZIRmv"}},{"cell_type":"markdown","source":["La búsqueda de hiperparámetros se suele hacer utilizando técnicas de validación cruzada. Esto significa que el modelo es evaluado en múltiples subconjuntos del conjunto de datos, lo que proporciona una medida más robusta de su rendimiento y su capacidad de generalización."],"metadata":{"id":"P0UFTwiGI9sU"}},{"cell_type":"code","source":["# Realizar validación cruzada\n","\n","# Configurar la validación cruzada k-fold\n","cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)\n","\n","# Definir los scorers\n","scoring = {\n","    'accuracy': make_scorer(accuracy_score),\n","    'precision': make_scorer(precision_score, average='weighted'),\n","    'recall': make_scorer(recall_score, average='weighted'),\n","    'f1': make_scorer(f1_score, average='weighted')\n","}\n","\n","# Realizar la validación cruzada\n","cv_results = cross_validate(pipeline, X_train, y_train, cv=cv, scoring=scoring, return_train_score=True)\n","\n","# Mostrar los resultados\n","print(\"Resultados de la validación cruzada:\")\n","for key, values in cv_results.items():\n","    print(f\"{key}: {values.mean():.4f} ± {values.std():.4f}\")\n"],"metadata":{"id":"50VOxTcUuhVq","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1718951736368,"user_tz":240,"elapsed":437,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}},"outputId":"ca51c30d-f4d7-4a6b-fc94-6b5adab840b9"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Resultados de la validación cruzada:\n","fit_time: 0.0168 ± 0.0024\n","score_time: 0.0156 ± 0.0042\n","test_accuracy: 0.9459 ± 0.0208\n","train_accuracy: 0.9587 ± 0.0080\n","test_precision: 0.9471 ± 0.0213\n","train_precision: 0.9598 ± 0.0081\n","test_recall: 0.9459 ± 0.0208\n","train_recall: 0.9587 ± 0.0080\n","test_f1: 0.9461 ± 0.0209\n","train_f1: 0.9588 ± 0.0080\n"]}]},{"cell_type":"markdown","source":["**Resultados de la validación cruzada:**\n","\n","**Métricas de Tiempo**\n","- fit_time: Tiempo promedio que lleva ajustar el modelo en cada fold de validación cruzada. En este caso, el valor reportado es 0.0337 segundos en promedio, con una desviación estándar de 0.0130 segundos. Esto indica el tiempo de entrenamiento del modelo en cada iteración de validación cruzada.\n","\n","- score_time: Tiempo promedio que lleva predecir las etiquetas en cada fold de validación cruzada. El valor reportado es 0.0292 segundos en promedio, con una desviación estándar de 0.0081 segundos. Esto refleja el tiempo que el modelo tarda en hacer predicciones una vez que ha sido entrenado.\n","\n","**Métricas de Desempeño**\n","- test_accuracy: Precisión promedio del modelo en los conjuntos de prueba de cada fold de validación cruzada. El valor reportado es 0.9459, con una desviación estándar de 0.0208. Indica la proporción de predicciones correctas realizadas por el modelo en los datos de prueba.\n","\n","- train_accuracy: Precisión promedio del modelo en los conjuntos de entrenamiento de cada fold de validación cruzada. El valor reportado es 0.9594, con una desviación estándar de 0.0053. Representa la proporción de predicciones correctas realizadas por el modelo en los datos utilizados para entrenamiento.\n","\n","- test_precision: Precisión promedio del modelo en los conjuntos de prueba de cada fold de validación cruzada. El valor reportado es 0.9471, con una desviación estándar de 0.0213. Mide la precisión del modelo en la predicción de la clase positiva (1) en los datos de prueba.\n","\n","- train_precision: Precisión promedio del modelo en los conjuntos de entrenamiento de cada fold de validación cruzada. El valor reportado es 0.9608, con una desviación estándar de 0.0056. Mide la precisión del modelo en la predicción de la clase positiva (1) en los datos de entrenamiento.\n","\n","- test_recall: Recall promedio del modelo en los conjuntos de prueba de cada fold de validación cruzada. El valor reportado es 0.9459, con una desviación estándar de 0.0208. Indica la proporción de instancias positivas que el modelo predijo correctamente sobre el número total de instancias positivas.\n","\n","- train_recall: Recall promedio del modelo en los conjuntos de entrenamiento de cada fold de validación cruzada. El valor reportado es 0.9594, con una desviación estándar de 0.0053. Indica la proporción de instancias positivas que el modelo predijo correctamente sobre el número total de instancias positivas en los datos de entrenamiento.\n","\n","- test_f1: Puntuación F1 promedio del modelo en los conjuntos de prueba de cada fold de validación cruzada. El valor reportado es 0.9461, con una desviación estándar de 0.0209. Es una métrica que combina precisión y recall, proporcionando una medida equilibrada del rendimiento del modelo en los datos de prueba.\n","\n","- train_f1: Puntuación F1 promedio del modelo en los conjuntos de entrenamiento de cada fold de validación cruzada. El valor reportado es 0.9596, con una desviación estándar de 0.0053. Similar a test_f1, pero calculado en los datos de entrenamiento.\n","\n","**Interpretación**\n","- Tiempo: Los tiempos de ajuste y puntuación son relativamente bajos, indicando que el modelo es eficiente en términos de tiempo de ejecución.\n","\n","- Precisión y Recall: Tanto en los conjuntos de entrenamiento como de prueba, el modelo muestra valores altos de precisión, recall y F1-score. Esto sugiere que el modelo de Regresión Logística tiene un buen rendimiento en la clasificación de los datos en ambas clases.\n","\n","- Consistencia: Las desviaciones estándar pequeñas en las métricas de desempeño (accuracy, precision, recall, F1-score) indican que el modelo es consistente en su rendimiento a través de los diferentes folds de validación cruzada.\n","\n","E**n resumen, los resultados de la validación cruzada muestran que el modelo de Regresión Logística es robusto y generaliza bien a datos no vistos, con un rendimiento consistente en múltiples particiones del conjunto de datos.**\n","\n","\n","\n","\n","\n"],"metadata":{"id":"Wo5CtZouLhve"}},{"cell_type":"code","source":["# Guardar el modelo como archivo pickle en Google Drive\n","model_path = '/content/drive/MyDrive/Proyecto 7/data/best_model.pkl'  # Ruta en tu Google Drive\n","with open(model_path, 'wb') as f:\n","    pickle.dump(best_model, f)"],"metadata":{"id":"HXWroUBoL85A","executionInfo":{"status":"ok","timestamp":1718951751397,"user_tz":240,"elapsed":298,"user":{"displayName":"Barbara Ortiz","userId":"12183043448921656595"}}},"execution_count":33,"outputs":[]}]}